자바의 특성
1. 상속성
자식 객체가 부모 객체의 모든것을 상속받아 사용할 수 있다. 부모로부터 중요한것이나 꼭 필요한것들을 자식이 상속받아 자신의것처럼 사용이 가능하기 때문에 
각 클래스간 수정 및 추가에 대한 유연성 및 확장성이 증가되고 코드를 재활용함으로써 간소화된 클래스 구조를 만들 수 있다.

2. 다형성
똑같은 타입의 객체의 메소드 기능이 다양해지는 것이다. 하위클래스가 상위클래스의 메서드와 동일한이름의 함수를 지니면 우선순위에 따라
자식클래스의 메소드가 호출되는 오버라이딩과, 같은 이름의 메소드를 파라미터 개수, 유형 등에 따라 다르게 사용할 수 있는 오버로딩이 있다.

3. 캡슐화(은닉성)
객체지향에서 캡슐화는 데이터 구조와 데이터를 다루는 방법을 결합시켜 묶는 것을 말한다. 또는
외부 프로그램(class)에게 정보(속성값)을 감추는 것이다. public, protected, default, private 등의 접근 제한자를 이용해 외부 클래스에서 
접근 가능및 불가능 하도록 설계할 수 있다.

4. 추상화
개발자에게 필요한 객체의 공통적인 특징(속성 과 기능)을 뽑아내는것이며 객체를 추상화시킨것이 클래스, 클래스를 추상화 시킨것이 추상클래스, 극한까지 추상화시킨게 인터페이스이다.


자바의 장점

객체 지향 언어이다
 객체 지향 프로그래밍(Object Oriented Programming, OOP)이란 프로그램을 개발하는 기법으로, 부품에 해당하는 객체들을 먼저 만들고 이것들을 하나씩 조립 및 연결해서
 전체 프로그램을 완성하는 기법을 말한다. 자바는 100% 객체 지향 언어이며, 객체를 만들기 위해 설계도인 클래스를 작성하고 객체와 객체를 연결하여 목적에 맞는 프로그램을 만들어 낸다

메모리를 자동으로 관리한다
 C++이 메모리 관리를 위해 개발자가 직접 코드를 작성해야 하는 반면, 자바는 개발자가 메모리에 직접 접근할 수 없으며 자바가 직접 메모리를 관리한다. 
 객체를 생성할 때 자동적으로 메모리 영역을 찾아서 할당하고, 사용이 완료되면 Garbage Collector를 실행시켜 
자동적으로 사용하지 않는 객체를 제거한다. 따라서 개발자는 메모리 관리의 수고스러움을 덜고, 코딩에 좀 더 집중할 수 있다.

오픈소스 라이브러리가 풍부하다
 자바는 오픈소스 언어이기 때문에 자바 프로그램에서 사용하는 라이브러리 또한 오픈소스가 많다. 오픈소스 라이브러리를 사용하면 개발 시간을
 단축하면서 안정성이 높은 애플리케이션을 쉽게 개발할 수 있다.
